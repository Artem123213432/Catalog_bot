from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from bot.states.cart import CartStates
from bot.models.catalog import CATEGORIES, Product
from bot.keyboards.catalog import get_product_keyboard
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import requests
from bot.utils.excel_handler import save_order
from bot.utils.payment import create_payment, check_payment
import asyncio
from bot.data.cart_storage import user_carts
import logging

router = Router()
logger = logging.getLogger(__name__)

DJANGO_API_URL = "http://admin_panel:8000/api/orders/"

def get_cart_keyboard(cart):
    keyboard = []
    for idx, item in enumerate(cart):
        keyboard.append([
            InlineKeyboardButton(
                text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {item['name']}",
                callback_data=f"remove_{idx}"
            )
        ])
    if cart:
        keyboard.append([
            InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")
        ])
    return InlineKeyboardMarkup(inline_keyboard=keyboard) if cart else None

@router.message(Command("cart"))
async def cmd_cart(message: Message):
    try:
        user_id = message.from_user.id
        cart = user_carts.get(user_id, [])
        if not cart:
            await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
            return
        text = "\n".join([f"<b>{item['name']}</b> ‚Äî {item['price']} ‚ÇΩ" for item in cart])
        total = sum(item['price'] for item in cart)
        await message.answer(f"–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n{text}\n\n–ò—Ç–æ–≥–æ: {total} ‚ÇΩ", reply_markup=get_cart_keyboard(cart))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data.startswith("add_to_cart_"))
async def add_to_cart(callback: CallbackQuery):
    user_id = callback.from_user.id
    product_id = int(callback.data.split("_")[3])
    
    for category in CATEGORIES:
        for subcategory in category.subcategories:
            for product in subcategory.products:
                if product.id == product_id:
                    user_carts.setdefault(user_id, []).append({
                        "id": product.id,
                        "name": product.name,
                        "price": product.price
                    })
                    await callback.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
                    return
    await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

@router.callback_query(F.data.startswith("remove_"))
async def remove_from_cart(callback: CallbackQuery):
    user_id = callback.from_user.id
    idx = int(callback.data.split("_")[1])
    cart = user_carts.get(user_id, [])
    if 0 <= idx < len(cart):
        removed = cart.pop(idx)
        await callback.answer(f"{removed['name']} —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
    else:
        await callback.answer("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
    
    if cart:
        text = "\n".join([f"<b>{item['name']}</b> ‚Äî {item['price']} ‚ÇΩ" for item in cart])
        total = sum(item['price'] for item in cart)
        await callback.message.edit_text(f"–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n{text}\n\n–ò—Ç–æ–≥–æ: {total} ‚ÇΩ", reply_markup=get_cart_keyboard(cart))
    else:
        await callback.message.edit_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")

@router.callback_query(F.data == "checkout")
async def checkout(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    cart = user_carts.get(user_id, [])
    if not cart:
        await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", show_alert=True)
        return
    await state.set_state(CartStates.waiting_for_name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

@router.message(CartStates.waiting_for_name)
async def get_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(CartStates.waiting_for_phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

@router.message(CartStates.waiting_for_phone)
async def get_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await state.set_state(CartStates.waiting_for_address)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")

@router.message(CartStates.waiting_for_address)
async def get_address(message: Message, state: FSMContext):
    await state.update_data(address=message.text)
    data = await state.get_data()
    text = (
        f"<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:</b>\n"
        f"–ò–º—è: {data['name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"–ê–¥—Ä–µ—Å: {data['address']}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑? (–¥–∞/–Ω–µ—Ç)"
    )
    await state.set_state(CartStates.confirming)
    await message.answer(text)

@router.message(CartStates.confirming)
async def confirm_order(message: Message, state: FSMContext):
    if message.text.lower() not in ("–¥–∞", "yes", "y"): 
        await message.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.")
        await state.clear()
        return
    
    try:
        data = await state.get_data()
        user_id = message.from_user.id
        cart = user_carts.get(user_id, [])
        
        
        order_data = {
            "client": {
                "name": data['name'],
                "phone": data['phone'],
                "address": data['address']
            },
            "items": [
                {
                    "product_id": item.get("id"),
                    "quantity": item.get("quantity", 1),
                    "name": item.get("name"),
                    "price": item.get("price")
                } for item in cart
            ]
        }
        
        
        save_order(order_data)
        
        
        total_sum = sum(item['price'] * item['quantity'] for item in cart)
        payment = await create_payment(
            amount=total_sum,
            description=f"–ó–∞–∫–∞–∑ –æ—Ç {data['name']}"
        )
        
        
        await state.update_data(payment_id=payment['id'])
        
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑", url=payment['payment_url'])]
        ])
        
        await message.answer(
            f"–í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
            f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {total_sum} ‚ÇΩ\n"
            f"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –µ–≥–æ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:",
            reply_markup=keyboard
        )
        
        
        user_carts[user_id] = []
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

async def check_payment_status(message: Message, state: FSMContext, payment_id: str):
    for _ in range(30):  
        payment = await check_payment(payment_id)
        if payment and payment['paid']:
            await message.answer(
                "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
            )
            
            user_id = message.from_user.id
            user_carts[user_id] = []
            await state.clear()
            return
        await asyncio.sleep(10)
    
    await message.answer(
        "‚ö†Ô∏è –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ.\n"
        "–ï—Å–ª–∏ –≤—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –∑–∞–∫–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
    )

def send_order_to_django(order_data):
    try:
        response = requests.post(DJANGO_API_URL, json=order_data, timeout=5)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ –≤ Django: {e}")
        return None 